// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AppsAccountsRoutesGetCsrfTokenData, AppsAccountsRoutesGetCsrfTokenResponses, AppsAccountsRoutesLoginData, AppsAccountsRoutesLoginResponses, AppsAccountsRoutesLogoutData, AppsAccountsRoutesLogoutResponses, AppsAccountsRoutesMeData, AppsAccountsRoutesMeResponses, AppsAccountsRoutesRegisterData, AppsAccountsRoutesRegisterResponses, AppsLogbooksLogbooksRoutesListLogbooksData, AppsLogbooksLogbooksRoutesListLogbooksResponses, AppsLogbooksLogbooksRoutesAddLogbookData, AppsLogbooksLogbooksRoutesAddLogbookResponses, AppsLogbooksLogbooksRoutesUpdateLogbookData, AppsLogbooksLogbooksRoutesUpdateLogbookResponses, AppsLogbooksLogbooksRoutesGetLogbookData, AppsLogbooksLogbooksRoutesGetLogbookResponses, AppsLogbooksLogentriesRoutesAddLogentryData, AppsLogbooksLogentriesRoutesAddLogentryResponses, AppsTodosRoutesListTodosData, AppsTodosRoutesListTodosResponses, AppsTodosRoutesAddTodoData, AppsTodosRoutesAddTodoResponses, AppsTodosRoutesUpdateTodoData, AppsTodosRoutesUpdateTodoResponses, AppsTodosRoutesGetTodoData, AppsTodosRoutesGetTodoResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Csrf Token
 */
export const appsAccountsRoutesGetCsrfToken = <ThrowOnError extends boolean = false>(options?: Options<AppsAccountsRoutesGetCsrfTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppsAccountsRoutesGetCsrfTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/accounts/set-csrf-token',
        ...options
    });
};

/**
 * Login
 */
export const appsAccountsRoutesLogin = <ThrowOnError extends boolean = false>(options: Options<AppsAccountsRoutesLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppsAccountsRoutesLoginResponses, unknown, ThrowOnError>({
        url: '/api/accounts/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 */
export const appsAccountsRoutesLogout = <ThrowOnError extends boolean = false>(options?: Options<AppsAccountsRoutesLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AppsAccountsRoutesLogoutResponses, unknown, ThrowOnError>({
        url: '/api/accounts/logout',
        ...options
    });
};

/**
 * Me
 */
export const appsAccountsRoutesMe = <ThrowOnError extends boolean = false>(options?: Options<AppsAccountsRoutesMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppsAccountsRoutesMeResponses, unknown, ThrowOnError>({
        url: '/api/accounts/me',
        ...options
    });
};

/**
 * Register
 */
export const appsAccountsRoutesRegister = <ThrowOnError extends boolean = false>(options: Options<AppsAccountsRoutesRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppsAccountsRoutesRegisterResponses, unknown, ThrowOnError>({
        url: '/api/accounts/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Logbooks
 */
export const appsLogbooksLogbooksRoutesListLogbooks = <ThrowOnError extends boolean = false>(options?: Options<AppsLogbooksLogbooksRoutesListLogbooksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppsLogbooksLogbooksRoutesListLogbooksResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/logbooks/',
        ...options
    });
};

/**
 * Add Logbook
 */
export const appsLogbooksLogbooksRoutesAddLogbook = <ThrowOnError extends boolean = false>(options: Options<AppsLogbooksLogbooksRoutesAddLogbookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppsLogbooksLogbooksRoutesAddLogbookResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/logbooks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Logbook
 */
export const appsLogbooksLogbooksRoutesUpdateLogbook = <ThrowOnError extends boolean = false>(options: Options<AppsLogbooksLogbooksRoutesUpdateLogbookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AppsLogbooksLogbooksRoutesUpdateLogbookResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/logbooks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Logbook
 */
export const appsLogbooksLogbooksRoutesGetLogbook = <ThrowOnError extends boolean = false>(options: Options<AppsLogbooksLogbooksRoutesGetLogbookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsLogbooksLogbooksRoutesGetLogbookResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/logbooks/{logbook_id}',
        ...options
    });
};

/**
 * Add Logentry
 */
export const appsLogbooksLogentriesRoutesAddLogentry = <ThrowOnError extends boolean = false>(options: Options<AppsLogbooksLogentriesRoutesAddLogentryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppsLogbooksLogentriesRoutesAddLogentryResponses, unknown, ThrowOnError>({
        url: '/api/logentries/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Todos
 */
export const appsTodosRoutesListTodos = <ThrowOnError extends boolean = false>(options?: Options<AppsTodosRoutesListTodosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppsTodosRoutesListTodosResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/todos/',
        ...options
    });
};

/**
 * Add Todo
 */
export const appsTodosRoutesAddTodo = <ThrowOnError extends boolean = false>(options: Options<AppsTodosRoutesAddTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppsTodosRoutesAddTodoResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/todos/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Todo
 */
export const appsTodosRoutesUpdateTodo = <ThrowOnError extends boolean = false>(options: Options<AppsTodosRoutesUpdateTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AppsTodosRoutesUpdateTodoResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/todos/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Todo
 */
export const appsTodosRoutesGetTodo = <ThrowOnError extends boolean = false>(options: Options<AppsTodosRoutesGetTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsTodosRoutesGetTodoResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/todos/{todo_id}',
        ...options
    });
};